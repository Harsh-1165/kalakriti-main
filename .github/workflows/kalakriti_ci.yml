name: Deploy Kalakriti App

on:
  push:
    branches:
      - main  # or your deployment branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/kalakriti-app .

    - name: Push Docker Image to Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/kalakriti-app

  deploy:
    needs: build
    runs-on: self-hosted  # EC2 runner with GitHub Actions agent

    steps:
    - name: Pull Image from Docker Hub
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/kalakriti-app:latest

    - name: Run Docker Container
      run: |
        docker stop kalakriti || true && docker rm kalakriti || true
        docker run -d -p 5000:5000 --name kalakriti \
          -e MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
          ${{ secrets.DOCKER_USERNAME }}/kalakriti-app:latest
   
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "rm -rf kalakriti-main && mkdir kalakriti-main"
        scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no -r . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/kalakriti-main
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd kalakriti-main
          docker compose down || true
          docker compose up -d --build
        EOF
